// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2018 21:31:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Part5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Part5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] KEY;
reg [15:0] SW;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;

// assign statements (if any)                          
Part5 i1 (
// port map - connection between master ports and signals/registers   
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY),
	.SW(SW)
);
initial 
begin 
#20000 $finish;
end 

// KEY[0]
initial
begin
	KEY[0] = 1'b0;
	KEY[0] = #7500 1'b1;
	KEY[0] = #2500 1'b0;
end 
// SW[ 15 ]
initial
begin
	SW[15] = 1'b0;
	SW[15] = #5000 1'b1;
	SW[15] = #5000 1'b0;
end 
// SW[ 14 ]
initial
begin
	SW[14] = 1'b0;
	SW[14] = #5000 1'b1;
	SW[14] = #5000 1'b0;
end 
// SW[ 13 ]
initial
begin
	SW[13] = 1'b0;
	SW[13] = #5000 1'b1;
	SW[13] = #5000 1'b0;
end 
// SW[ 12 ]
initial
begin
	SW[12] = 1'b0;
	SW[12] = #5000 1'b1;
	SW[12] = #5000 1'b0;
end 
// SW[ 11 ]
initial
begin
	SW[11] = 1'b0;
	SW[11] = #5000 1'b1;
	SW[11] = #5000 1'b0;
end 
// SW[ 10 ]
initial
begin
	SW[10] = 1'b0;
	SW[10] = #5000 1'b1;
	SW[10] = #5000 1'b0;
end 
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
	SW[9] = #5000 1'b1;
	SW[9] = #5000 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b0;
	SW[8] = #5000 1'b1;
	SW[8] = #5000 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b0;
	SW[7] = #5000 1'b1;
	SW[7] = #5000 1'b0;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
	SW[6] = #5000 1'b1;
	SW[6] = #5000 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
	SW[5] = #5000 1'b1;
	SW[5] = #5000 1'b0;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b0;
	SW[4] = #5000 1'b1;
	SW[4] = #5000 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
	SW[3] = #5000 1'b1;
	SW[3] = #5000 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
	SW[2] = #5000 1'b1;
	SW[2] = #5000 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
	SW[1] = #5000 1'b1;
	SW[1] = #5000 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
	SW[0] = #5000 1'b1;
	SW[0] = #5000 1'b0;
end 
endmodule

